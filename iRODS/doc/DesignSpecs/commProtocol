iRODS messages
--------------

The iRODS clients and servers communicate with each other by sending
iRODS messages.

Each iRODS message can contain up to 5 parts described below:

1) A 4 bytes integer specifying the length of the Message Header that follows.

2) The iRODS message header in XML format. In C, the message header is
represented by the msgHeader_t struct defined as follows: 

typedef struct msgHeader {
        char type[HEADER_TYPE_LEN];
        int msgLen;     /* Length of the main msg */
        int errorLen;   /* Length of the error struct */
        int bsLen;      /* Length of optional byte stream */
        int intInfo;    /* an additional integer info, for API, it is the
                         * apiReqNum */
} msgHeader_t;

This struct is packed into a XML message using the packStruct ()
subroutine. The following is a typical message header for an API request
type message:

<MsgHeader_PI>
<type>RODS_API_REQ</type>
<msgLen>398</msgLen>
<errorLen>0</errorLen>
<bsLen>0</bsLen>
<intInfo>702</intInfo>
</MsgHeader_PI>

3) The main message - typically it is a C struct packed with the packStruct()
subroutine. The length of this message is given in the "msgLen" element of
the message header. The struct can be packed using the NATIVE_PROT protocol
or the XML_PROT protocol, depending on the communication protocol used for
the session. 

If the communication protocol is NATIVE_PROT, the contents of the C struct 
will be written into a buffer sequentially based on the Packing Instruction 
(PI) of the C struct. The contents are not labeled with the assumption that 
the unpackStruct() routine will use the same PI to sequentially unpack 
the buffer into the C struct. NATIVE_PROT is the default protocol because 
it is more efficient although the message header and the RODS_CONNECT_T
type messages (see the section on Protocol for the initial connection) 
always uses the XML protocol.

If the communication protocol is XML_PROT, each item in the C struct 
will be tagged with XML tags in the packing process. It uses the 
name given for each element in the PI for the tag name.  For example, 
the string Version_PI defined in rodsPackInstruct.h, is the PI for the 
version_t struct:
  
#define Version_PI "int status; str relVersion[NAME_LEN]; str apiVersion[NAME_LEN];"

typedef struct {
    int status;
    char relVersion[NAME_LEN];
    char apiVersion[NAME_LEN];
} version_t;

The packStruct() routine uses this PI and packs a given version_t C struct
and produces the following  XML message:

<Version_PI>
<status>0</status>
<relVersion>rods0.5</relVersion>
<apiVersion>a</apiVersion>
</Version_PI>

Note that the name of tags used for each element are the names given in 
Version_PI. 

4) The error message - The error messages are contained in the rError_t
struct which is defined as:

typedef struct {
    int count;          /* number of error in the stack */
    rErrMsg_t **errMsg; /* an array of pointers to the rErrMsg_t struct */
} rError_t;

where 

typedef struct {
    int status;
    char msg[ERR_MSG_LEN];
} rErrMsg_t;

The rError_t struct is packed with the packStruct() routine and the length
of the error message is given in the "errorLen" element of the message header.
In most iRODS messages, errorLen is 0 meaning no the error message.
   
5) The Bytes Stream - The "error message" is followed by a "Bytes Stream"
which is a buffer of raw data (mostly for data transfer). The length
of the "Bytes Stream" is given in the "bsLen" element of the message header.
In most iRODS messages, bsLen is 0 meaning no raw data in the message.


Communication Protocol:
-----------------------

Protocol for the initial connection:


1) rodsServer open a socket and listen on a well known port

2) rods client connect to the rodsServer.

3) rods client send a RODS_CONNECT_T iRODS message which includes a 
startupPack_t struct. Remember that a iRODS message can contain up to 5 parts. 

#define RODS_CONNECT_T 	"RODS_CONNECT"

typedef struct startupPack {
    irodsProt_t irodsProt;
    int connectCnt;
    char proxyUser[NAME_LEN];
    char proxyRodsZone[NAME_LEN];
    char clientUser[NAME_LEN];
    char clientRodsZone[NAME_LEN];
    char relVersion[NAME_LEN];
    char apiVersion[NAME_LEN];
    char option[NAME_LEN];
} startupPack_t;

The RODS_CONNECT_T type message is always packed using the XML protocol, 
but the "irodsProt" element in the startupPack_t struct specifies the 
protocol to be used for all subsequent iRODS messages. One of the following 
two protocols can be used:

/* protocol */
typedef enum {
    NATIVE_PROT,
    XML_PROT
} irodsProt_t;
 
i.e., a value of 0 means native and a value of 1 means XML. With the iCommands
and the client C library, the default is NATIVE_PROT. The protocol can be  
changed to XML by setting the env variable "irodsProt" to 1. In addition,
if the env variable "irodsLogLevel" is set to 9 or higher, the generated XML
will be output to stdout. Similarly, Similarly, on the server side, 
the generated XML generated can be output to the log file by setting
$spLogLevel=3 in the server/bin/start.pl file.

4) rodsServer fork and exec a rodsAgent. The startupPack is passed onto
the rodsAgent through env variables.

5) rodsAgent replies with RODS_VERSION_T message which includes a version_t
struct.

#define RODS_VERSION_T    "RODS_VERSION"
  
typedef struct {
    int status;
    char relVersion[NAME_LEN];
    char apiVersion[NAME_LEN];
} version_t;

At this point, the client is connected to the server and a few general info 
type API calls can be made. But to be able to made most of the API calls,
the client must authenticate himself/herself to the server.

6) authentication call - authentication calls by clients are made just like
any other API calls by sending a RODS_API_REQ_T message to the server. 

7) API request - clients make API calls by sending a RODS_API_REQ_T message 
to the server. Each API has an entry in the RcApiTable[] table in the
apiTable.h file which specifies the API number, the PI for the input and
output structs, flags to indicate whether there are input/output 
"Bytes Streams", authorization levels and the server handler for this API.
The client packs the input struct based on the PI given in the 
RcApiTable[] table. The message header, the packed main message and the
"Bytes stream" (if any) are send to the server as a single iRODS message.

#define RODS_API_REQ_T    "RODS_API_REQ"

The server receives the API request, calls the API's handle to process the
request	and returns the results in a RODS_API_REPLY_T type message to
the client.

#define RODS_API_REPLY_T    "RODS_API_REPLY"

8) Other Server to Client msg types:

a) disconnect - a client sends a RODS_DISCONNECT_T message to the server to
disconnect. 

#define RODS_DISCONNECT_T    "RODS_DISCONNECT"

b) re-authentication - needed for cross-zone connection and not yet 
implemented.

#define RODS_REAUTH_T     "RODS_REAUTH"


