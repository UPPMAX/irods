<!-- Ant makefile for JARGON -->
<project name="Jargon" default="build" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<description>
      Build file for JARGON API, a client api for all your datagrid needs.
  </description>

	<property file="build.properties" />
	<path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.0.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />

	<!--
		include all jar files in the ./lib directory in the compile classpath
	-->
	<path id="class.path">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
	</path>

	<target name="clean">
		<echo message="clean task..." />
		<delete dir="${build.dir}" />
	</target>

	<target name="init">
		<echo message="Init task..." />
		<property name="project_name" value="Jargon" />
		<property name="jar_name" value="${dist.dir}/${project_name}.jar" />
		<tstamp />
		<echo message="Creating directory structure for build..." />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${src.build.dir}" />
		<mkdir dir="${unittest.build.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${scratch.dir}" />
		<mkdir dir="${javadoc.dir}" />
		<mkdir dir="${code.coverage.report.dir}" />

	</target>

	<!--  properly set the flag for generating debug info in compile, will override default
			if generating a code coverage report -->
	<target name="set_compile_debug">
		<echo message="default compile.with.debug setting in build.properties=${compile.with.debug}" />
		<condition property="set.java.debug" value="on">
			<or>
				<istrue value="${compile.debug.override}" />
				<istrue value="${compile.with.debug}" />
			</or>
		</condition>
		<condition property="set.java.debug" value="off">
			<not>
				<isset property="set.java.debug" />
			</not>
		</condition>
	</target>

	<!-- compile jargon library source code -->
	<target name="compile_src" depends="init, set_compile_debug">
		<echo message="Compiling Java sources..." />
		<echo message="compiling java with debug setting of=${set.java.debug}" />
		<!--  if debug is 'off' debuglevel will be ignored   debug="${set.java.debug}" -->
		<javac destdir="${src.build.dir}" debug="${set.java.debug}" debuglevel="vars,lines,source" source="1.5" target="1.5" includeantruntime="false">
			<src path="${src.dir}" />
			<classpath refid="class.path" />
		</javac>
		<echo message="copying any properties XML and manifest files to build dir after compile..." />
		<copy todir="${src.build.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
				<include name="**/*.MF" />
			</fileset>
		</copy>
	</target>

	<!-- compile jargon library test source code -->
	<target name="compile_test">
		<echo message="Compiling unit test Java sources..." />
		<javac destdir="${unittest.build.dir}" source="1.5" target="1.5" debug="${set.java.debug}" debuglevel="vars,lines,source" includeantruntime="false">
			<src path="${unittest.src.dir}" />
			<classpath refid="class.path.test" />
		</javac>
		<echo message="copying any XML and manifest files to build dir after compile..." />
		<copy todir="${unittest.build.dir}">
			<fileset dir="${unittest.src.dir}">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
				<include name="**/*.MF" />
			</fileset>
		</copy>
	</target>

	<path id="class.path.test">
		<pathelement location="${src.build.dir}" />
		<pathelement location="${unittest.build.dir}" />
		<path refid="class.path" />
	</path>

	<target name="compile" depends="init, set_compile_debug, compile_src, compile_test">
		<echo message="compiling source and test..." />
	</target>

	<target name="build" depends="compile">
		<echo message="creating a jargon library jar file..." />
		<jar basedir="${src.build.dir}" jarfile="${dist.dir}/${project_name}.jar" includes="**/*.*" manifest="${src.dir}/MANIFEST.MF" />
		<echo message="creating a jargon-test jar file..." />
		<jar basedir="${unittest.build.dir}" jarfile="${dist.dir}/${project_name}-test.jar" includes="**/*.*" manifest="${unittest.src.dir}/MANIFEST.MF" />
	</target>

	<target name="rebuild" depends="clean, build" />


	<target name="gsi" description="Build with gsi files.">
		<!-- Deprecated  TODO: removed in next release! MCC-->
		<delete file="${src.dir}/edu/sdsc/grid/io/srb/GSIAuth.java" />
		<copy overwrite="true" file="${src.dir}/edu/sdsc/grid/io/srb/GSIAuth.java_real" tofile="${src.dir}/edu/sdsc/grid/io/srb/GSIAuth.java" />
		<antcall target="build">
		</antcall>
	</target>

	<target name="javadocs" description="Build the JavaDocs.">
		<javadoc sourcepath="${src.dir}" packagenames="*" destdir="${javadoc.dir}" author="true" version="true" use="true" windowtitle="Jargon API">
		</javadoc>
	</target>

	<target name="unit_test" depends="init, compile">
		<echo message="running all junit tests..." />
		<junit fork="${junit.fork}" haltonfailure="${fail.on.junit.error}">
			<classpath location="${instrumented.code.dir}" />
			<classpath refid="class.path.test" />
			<formatter type="brief" usefile="false" />
			<test name="edu.sdsc.jargon.unittest.testsuites.AllTests" />
		</junit>
		<echo message="running clean target will clean up unit test scratch directories..." />
	</target>
	
	<target name="specific_unit_test" depends="init, compile">
			<echo message="running single specified test..." />
			<junit fork="${junit.fork}" haltonfailure="${fail.on.junit.error}">
				<classpath refid="class.path.test" />
				<formatter type="brief" usefile="false" />
				<test name="org.irods.jargon.core.functionaltest.CreateModAVUReplicateRenameFunctionalTest" />
			</junit>
			<echo message="running clean target will clean up unit test scratch directories..." />
		</target>
	
	<target name="specific_unit_test2" depends="init, compile">
				<echo message="running single specified test..." />
				<junit fork="${junit.fork}" haltonfailure="${fail.on.junit.error}">
					<classpath refid="class.path.test" />
					<formatter type="brief" usefile="false" />
					<test name="org.irods.jargon.core.functionaltest.CreateModAVUReplicateRenameDelayExecFunctionalTest" />
				</junit>
				<echo message="running clean target will clean up unit test scratch directories..." />
			</target>


	<target name="unit_test_long" depends="init, compile">
		<echo message="running all junit tests, including long-running tests..." />
		<junit fork="${junit.fork}" haltonfailure="${fail.on.junit.error}">
			<classpath location="${instrumented.code.dir}" />
			<classpath refid="class.path.test" />
			<formatter type="brief" usefile="false" />
			<test name="edu.sdsc.jargon.unittest.testsuites.AllTestsIncludingLongAndFunctional" />
		</junit>
		<echo message="running clean target will clean up unit test scratch directories..." />
	</target>

	<target name="install_maven_artifacts" depends="build">
			<echo message="install jargon artifacts to local" />
		 <artifact:pom id="mypom" file="pom.xml" />
		 <artifact:install file="target/dist/Jargon.jar">
		    <pom refid="mypom"/>
		  </artifact:install>
	</target>
		
	<target name="deploy_maven_artifacts" depends="build">
		<echo message="deploying jargon artifacts to maven..." />

		<artifact:pom id="org.irods.jargon-trunk" file="pom.xml" />

		<artifact:install file="target/.jar">
			<pom refid="mypom" />
		</artifact:install>

		<artifact:deploy file="target/my-project-1.0.jar">
			<remoteRepository url="file://localhost/www/repository" />
			<pom refid="mypom" />
		</artifact:deploy>

	</target>

</project>
