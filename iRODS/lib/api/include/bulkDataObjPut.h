/*** Copyright (c), The Regents of the University of California            ***
 *** For more information please refer to files in the COPYRIGHT directory ***/
/* bulkDataObjPut.h - This dataObj may be generated by a program or script
 */

#ifndef BULK_DATA_OBJ_PUT_H
#define BULK_DATA_OBJ_PUT_H

/* This is a Object File I/O API call */

#include "rods.h"
#include "procApiRequest.h"
#include "apiNumber.h"
#include "initServer.h"
#if 0
#include "dataObjWrite.h"
#include "dataObjClose.h"
#endif
#include "genQuery.h"

#define TMP_PHY_BUN_DIR		"tmpPhyBunDir"

typedef struct {
    char objPath[MAX_NAME_LEN];
    genQueryOut_t attriArray;   /* arrays of attrib - chksum */
    keyValPair_t condInput;   /* include chksum flag and value */
} bulkOprInp_t;

typedef struct RenamedPhyFiles {
    int count;
    char objPath[MAX_NUM_BULK_OPR_FILES][MAX_NAME_LEN];
    char origFilePath[MAX_NUM_BULK_OPR_FILES][MAX_NAME_LEN];
    char newFilePath[MAX_NUM_BULK_OPR_FILES][MAX_NAME_LEN];
} renamedPhyFiles_t;

#define BulkOprInp_PI "str objPath[MAX_NAME_LEN]; struct GenQueryOut_PI; struct KeyValPair_PI;"

#if defined(RODS_SERVER)
#define RS_BULK_DATA_OBJ_PUT rsBulkDataObjPut
/* prototype for the server handler */
int
rsBulkDataObjPut (rsComm_t *rsComm, bulkOprInp_t *bulkOprInp, 
bytesBuf_t *bulkOprInpBBuf);
int
_rsBulkDataObjPut (rsComm_t *rsComm, bulkOprInp_t *bulkOprInp,
bytesBuf_t *bulkOprInpBBuf);
int
createBunDirForBulkPut (rsComm_t *rsComm, dataObjInp_t *dataObjInp,
rescInfo_t *rescInfo, specColl_t *specColl, char *phyBunDir);
int
initDataObjInpFromBulkOpr (dataObjInp_t *dataObjInp, bulkOprInp_t *bulkOprInp);
int
bulkRegUnbunSubfiles (rsComm_t *rsComm, rescInfo_t *rescInfo, 
char *rescGroupName, char *collection, char *phyBunDir, int flags, 
genQueryOut_t *attriArray);
int
_bulkRegUnbunSubfiles (rsComm_t *rsComm, rescInfo_t *rescInfo, 
char *rescGroupName, char *collection, char *phyBunDir, int flags, 
genQueryOut_t *bulkDataObjRegInp, renamedPhyFiles_t *renamedPhyFiles, 
genQueryOut_t *attriArray);
int
bulkProcAndRegSubfile (rsComm_t *rsComm, rescInfo_t *rescInfo,
char *rescGroupName, char *subObjPath, char *subfilePath, rodsLong_t dataSize,
int dataMode, int flags, genQueryOut_t *bulkDataObjRegInp,
renamedPhyFiles_t *renamedPhyFiles, genQueryOut_t *attriArray);
int
bulkRegSubfile (rsComm_t *rsComm, char *rescName, char *rescGroupName,
char *subObjPath, char *subfilePath, rodsLong_t dataSize, int dataMode,
int modFlag, int replNum, char *chksum, genQueryOut_t *bulkDataObjRegInp,
renamedPhyFiles_t *renamedPhyFiles);
#else
#define RS_BULK_DATA_OBJ_PUT NULL
#endif

#ifdef  __cplusplus
extern "C" {
#endif

/* prototype for the client call */
/* rcBulkDataObjPut - Bulk Put (upload) a number of local files to iRODS.
 * bulkOprInpBBuf contains the bundled local files in tar format.
 * Input -
 *   rcComm_t *conn - The client connection handle.
 *   bulkOprInp_t *bulkOprInp - generic dataObj input. Relevant items are:
 *      objPath - the collection path under which the files are to be untar.
 *      condInput - conditional Input
 *          FORCE_FLAG_KW - overwrite an existing data object
 *	    DATA_TYPE_KW - "value" = the data type of the file.	
 *          DEST_RESC_NAME_KW - "value" = The destination Resource. 
 *   return value - The status of the operation.
 */

int
rcBulkDataObjPut (rcComm_t *conn, bulkOprInp_t *bulkOprInp,
bytesBuf_t *bulkOprInpBBuf);
#ifdef  __cplusplus
}
#endif

#endif	/* BULK_DATA_OBJ_PUT_H */
