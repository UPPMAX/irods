/**
 * @file msoTestMS.c
 *
 */

/*** Copyright (c), The Regents of the University of California            ***
 *** For more information please refer to files in the COPYRIGHT directory ***/

/**
 * @file  msoTestMS.c
 *
 * @brief Manage a list of keyword-value pair msoTest.
 *
 * MsoTest can be used to store metadata extracted from a file or
 * database, or to build up a list of options to control how a
 * microservice processes data.
 *
 * @author  David R. Nadeau / University of California, San Diego
 */

#include "rsApiHandler.h"
#include "msoDriversMS.h"




/**
 * \fn int msiobjget_test(msParam_t*  inRequestPath, msParam_t* outBuffer, ruleExecInfo_t* rei )
 *
 * \brief Create a new empty property list
 *
 * \module msoDrivers_test
 *
 * \since 3.0
 *
 * \author  Arcot Rajasekar
 * \date    2011
 *
 * \remark 
 *
 * \note test for getting object using microservices
 *
 * \usage None
 *
 * \param[in] inRequestPath - a STR_MS_T request string to external resource
 * \param[out] outBuffer - a BUF_LEN_MS_T returned buffer from external resource
 * \param[in,out] rei - The RuleExecInfo structure that is automatically
 *    handled by the rule engine. The user does not include rei as a
 *    parameter in the rule invocation.
 *
 * \DolVarDependence none
 * \DolVarModified none
 * \iCatAttrDependence none
 * \iCatAttrModified none
 * \sideeffect none
 *
 * \return integer
 * \retval 0 on success
 * \pre none
 * \post none
 * \sa none
 * \bug  no known bugs
**/



int 
msiobjget_test(msParam_t*  inRequestPath, msParam_t* outBuffer, ruleExecInfo_t* rei )
{

  char *reqStr;
  char *Buf;
  char str[200];
  bytesBuf_t *bBuf;
  RE_TEST_MACRO( "    Calling msiobjget_test" );
  
  /*  check for input parameters */
  if (inRequestPath ==  NULL || 
      strcmp(inRequestPath->type , STR_MS_T) != 0 || 
      inRequestPath->inOutStruct == NULL)
    return(USER_PARAM_TYPE_ERR);

  if (outBuffer == NULL || strcmp(outBuffer->type , BUF_LEN_MS_T) != 0 ||
      outBuffer->inOutStruct == NULL)
    return(USER_PARAM_TYPE_ERR);

  /*  coerce input to local variables */
  reqStr = (char *) inRequestPath->inOutStruct;


  bBuf = (bytesBuf_t *)  outBuffer->inpOutBuf; /* IMPORTANT THIS IS THE BUFFER */

  /* Do the processing */
  snprintf(str,199,"PID is %i. This is a test\n", getpid());
  Buf = strdup(str);

  /* fill out output parameters */
  bBuf->buf = Buf;
  bBuf->len = strlen(Buf);



  return(0);
}





/**
 * \fn int msiobjput_test(msParam_t*  inRequestPath, msParam_t* inBuffer, ruleExecInfo_t* rei )
 *
 * \brief Create a new empty property list
 *
 * \module msoDrivers_test
 *
 * \since 3.0
 *
 * \author  Arcot Rajasekar
 * \date    2011
 *
 * \remark 
 *
 * \note test for getting object using microservices
 *
 * \usage None
 *
 * \param[in] inRequestPath - a STR_MS_T path string to external resource
 * \param[in] outBuffer - a BUF_LEN_MS_T containing buffer to be stored in external resource
 * \param[in,out] rei - The RuleExecInfo structure that is automatically
 *    handled by the rule engine. The user does not include rei as a
 *    parameter in the rule invocation.
 *
 * \DolVarDependence none
 * \DolVarModified none
 * \iCatAttrDependence none
 * \iCatAttrModified none
 * \sideeffect none
 *
 * \return integer
 * \retval 0 on success
 * \pre none
 * \post none
 * \sa none
 * \bug  no known bugs
**/



int 
msiobjput_test(msParam_t*  inRequestPath, msParam_t* inBuffer, ruleExecInfo_t* rei )
{

  char *reqStr;
  bytesBuf_t *bBuf;
  RE_TEST_MACRO( "    Calling msiobjput_test" );
  
  /*  check for input parameters */
  if (inRequestPath ==  NULL || 
      strcmp(inRequestPath->type , STR_MS_T) != 0 || 
      inRequestPath->inOutStruct == NULL)
    return(USER_PARAM_TYPE_ERR);

  if (inBuffer == NULL || strcmp(inBuffer->type , BUF_LEN_MS_T) != 0 ||
      inBuffer->inOutStruct == NULL)
    return(USER_PARAM_TYPE_ERR);

  /*  coerce input to local variables */
  reqStr = (char *) inRequestPath->inOutStruct;
  bBuf = (bytesBuf_t *)  inBuffer->inOutStruct;

  /* Do the processing */
  /* nothing in the test version - should write to some file maybe :)*/

  return(0);
}

